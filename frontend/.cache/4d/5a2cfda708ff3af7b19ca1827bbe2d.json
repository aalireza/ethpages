{"id":"node_modules/uport-transports/lib/crypto.js","dependencies":[{"name":"/Users/sashavol/Misc/ethdenver-keybook/frontend/package.json","includedInParent":true,"mtime":1550371955498},{"name":"/Users/sashavol/Misc/ethdenver-keybook/frontend/node_modules/uport-transports/package.json","includedInParent":true,"mtime":1550368277431},{"name":"/Users/sashavol/Misc/ethdenver-keybook/frontend/node_modules/uport-transports/.babelrc","includedInParent":true,"mtime":499162500000},{"name":"tweetnacl","loc":{"line":10,"column":25},"parent":"/Users/sashavol/Misc/ethdenver-keybook/frontend/node_modules/uport-transports/lib/crypto.js","resolved":"/Users/sashavol/Misc/ethdenver-keybook/frontend/node_modules/tweetnacl/nacl-fast.js"},{"name":"tweetnacl-util","loc":{"line":14,"column":29},"parent":"/Users/sashavol/Misc/ethdenver-keybook/frontend/node_modules/uport-transports/lib/crypto.js","resolved":"/Users/sashavol/Misc/ethdenver-keybook/frontend/node_modules/tweetnacl-util/nacl-util.js"},{"name":"base64url","loc":{"line":18,"column":25},"parent":"/Users/sashavol/Misc/ethdenver-keybook/frontend/node_modules/uport-transports/lib/crypto.js","resolved":"/Users/sashavol/Misc/ethdenver-keybook/frontend/node_modules/base64url/index.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unpad = exports.pad = exports.decryptResponse = exports.decryptMessage = exports.encryptMessage = exports.randomString = exports.ASYNC_ENC_ALGORITHM = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _tweetnacl = require('tweetnacl');\n\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\n\nvar _tweetnaclUtil = require('tweetnacl-util');\n\nvar _tweetnaclUtil2 = _interopRequireDefault(_tweetnaclUtil);\n\nvar _base64url = require('base64url');\n\nvar _base64url2 = _interopRequireDefault(_base64url);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ASYNC_ENC_ALGORITHM = exports.ASYNC_ENC_ALGORITHM = 'x25519-xsalsa20-poly1305';\nvar BLOCK_SIZE = 64;\n\nfunction pad(message) {\n  var paddedSize = Math.ceil(message.length / BLOCK_SIZE) * BLOCK_SIZE;\n  // use `String.prototype.padEnd()` if available\n  if (typeof message.padEnd === 'function') return message.padEnd(paddedSize, '\\0');\n  var padded = message;\n  while (padded.length < paddedSize) {\n    padded += '\\0';\n  }\n  return padded;\n}\n\nfunction unpad(padded) {\n  return padded.replace(/\\0+$/, '');\n}\n\n/**\n *  Given a length, returns a random string of that length\n *\n *  @param    {Integer}                 length    specify length of string returned\n *  @return   {String}                            random string\n */\nfunction randomString(length) {\n  return _base64url2.default.fromBase64(_tweetnaclUtil2.default.encodeBase64(_tweetnacl2.default.randomBytes(length)));\n}\n\n/**\n *  Encrypts a message\n *\n *  @param      {String}   message    the message to be encrypted\n *  @param      {String}   boxPub     the public encryption key of the receiver, encoded as base64\n *  @return     {Object}              the encrypted message as an object containing a `version`, `nonce`, `ephemPublicKey` and `ciphertext`\n *  @private\n */\nfunction encryptMessage(message, boxPub) {\n  var _nacl$box$keyPair = _tweetnacl2.default.box.keyPair(),\n      publicKey = _nacl$box$keyPair.publicKey,\n      secretKey = _nacl$box$keyPair.secretKey;\n\n  var nonce = _tweetnacl2.default.randomBytes(_tweetnacl2.default.box.nonceLength);\n  var padded = pad(message);\n  var ciphertext = _tweetnacl2.default.box(_tweetnaclUtil2.default.decodeUTF8(padded), nonce, _tweetnaclUtil2.default.decodeBase64(boxPub), secretKey);\n  return {\n    version: ASYNC_ENC_ALGORITHM,\n    nonce: _tweetnaclUtil2.default.encodeBase64(nonce),\n    ephemPublicKey: _tweetnaclUtil2.default.encodeBase64(publicKey),\n    ciphertext: _tweetnaclUtil2.default.encodeBase64(ciphertext)\n  };\n}\n\n/**\n *  Decrypts a message\n *\n *  @param      {Object} encrypted                   The encrypted message object\n *  @param      {String} encrypted.version           The string `x25519-xsalsa20-poly1305`\n *  @param      {String} encrypted.nonce             Base64 encoded nonce\n *  @param      {String} encrypted.ephemPublicKey    Base64 encoded ephemeral public key\n *  @param      {String} encrypted.ciphertext        Base64 encoded ciphertext\n *  @param      {String} secretKey                   The secret key as a Uint8Array\n *  @return     {String}                             The decrypted message\n *  @private\n */\n\nfunction decryptMessage(_ref, secretKey) {\n  var version = _ref.version,\n      ciphertext = _ref.ciphertext,\n      nonce = _ref.nonce,\n      ephemPublicKey = _ref.ephemPublicKey;\n\n  if (!secretKey) throw new Error('Encryption secret key has not been configured');\n  if (version !== ASYNC_ENC_ALGORITHM) throw new Error('Unsupported encryption algorithm: ' + version);\n  if (!(ciphertext && nonce && ephemPublicKey)) throw new Error('Invalid encrypted message');\n  var decrypted = _tweetnacl2.default.box.open(_tweetnaclUtil2.default.decodeBase64(ciphertext), _tweetnaclUtil2.default.decodeBase64(nonce), _tweetnaclUtil2.default.decodeBase64(ephemPublicKey), secretKey);\n  if (!decrypted) throw new Error('Could not decrypt message');\n  return unpad(_tweetnaclUtil2.default.encodeUTF8(decrypted));\n}\n\n/**\n *  Decrypts a response from a promise. This is intended to be used to wrap the response from Chasqui or other transport\n *\n *  @param      {Object} encrypted                 The encrypted message object\n *  @param      {String} encrypted.version         The string `x25519-xsalsa20-poly1305`\n *  @param      {String} encrypted.nonce           Base64 encoded nonce\n *  @param      {String} encrypted.ephemPublicKey  Base64 encoded ephemeral public key\n *  @param      {String} encrypted.ciphertext      Base64 encoded ciphertext\n *  @param      {String} secretKey                 The secret key as a Uint8Array\n *  @return   {Promise<Object, Error>}             a promise which resolves with the decrypted message or rejects with an error\n */\nfunction decryptResponse(response, secretKey) {\n  return new Promise(function (resolve, reject) {\n    if ((typeof response === 'undefined' ? 'undefined' : _typeof(response)) === 'object') {\n      resolve(decryptMessage(response, secretKey));\n    }\n    resolve(response);\n  });\n}\n\nexports.randomString = randomString;\nexports.encryptMessage = encryptMessage;\nexports.decryptMessage = decryptMessage;\nexports.decryptResponse = decryptResponse;\nexports.pad = pad;\nexports.unpad = unpad;","map":{"mappings":[{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/uport-transports/lib/crypto.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}}],"sources":{"node_modules/uport-transports/lib/crypto.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unpad = exports.pad = exports.decryptResponse = exports.decryptMessage = exports.encryptMessage = exports.randomString = exports.ASYNC_ENC_ALGORITHM = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _tweetnacl = require('tweetnacl');\n\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\n\nvar _tweetnaclUtil = require('tweetnacl-util');\n\nvar _tweetnaclUtil2 = _interopRequireDefault(_tweetnaclUtil);\n\nvar _base64url = require('base64url');\n\nvar _base64url2 = _interopRequireDefault(_base64url);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ASYNC_ENC_ALGORITHM = exports.ASYNC_ENC_ALGORITHM = 'x25519-xsalsa20-poly1305';\nvar BLOCK_SIZE = 64;\n\nfunction pad(message) {\n  var paddedSize = Math.ceil(message.length / BLOCK_SIZE) * BLOCK_SIZE;\n  // use `String.prototype.padEnd()` if available\n  if (typeof message.padEnd === 'function') return message.padEnd(paddedSize, '\\0');\n  var padded = message;\n  while (padded.length < paddedSize) {\n    padded += '\\0';\n  }\n  return padded;\n}\n\nfunction unpad(padded) {\n  return padded.replace(/\\0+$/, '');\n}\n\n/**\n *  Given a length, returns a random string of that length\n *\n *  @param    {Integer}                 length    specify length of string returned\n *  @return   {String}                            random string\n */\nfunction randomString(length) {\n  return _base64url2.default.fromBase64(_tweetnaclUtil2.default.encodeBase64(_tweetnacl2.default.randomBytes(length)));\n}\n\n/**\n *  Encrypts a message\n *\n *  @param      {String}   message    the message to be encrypted\n *  @param      {String}   boxPub     the public encryption key of the receiver, encoded as base64\n *  @return     {Object}              the encrypted message as an object containing a `version`, `nonce`, `ephemPublicKey` and `ciphertext`\n *  @private\n */\nfunction encryptMessage(message, boxPub) {\n  var _nacl$box$keyPair = _tweetnacl2.default.box.keyPair(),\n      publicKey = _nacl$box$keyPair.publicKey,\n      secretKey = _nacl$box$keyPair.secretKey;\n\n  var nonce = _tweetnacl2.default.randomBytes(_tweetnacl2.default.box.nonceLength);\n  var padded = pad(message);\n  var ciphertext = _tweetnacl2.default.box(_tweetnaclUtil2.default.decodeUTF8(padded), nonce, _tweetnaclUtil2.default.decodeBase64(boxPub), secretKey);\n  return {\n    version: ASYNC_ENC_ALGORITHM,\n    nonce: _tweetnaclUtil2.default.encodeBase64(nonce),\n    ephemPublicKey: _tweetnaclUtil2.default.encodeBase64(publicKey),\n    ciphertext: _tweetnaclUtil2.default.encodeBase64(ciphertext)\n  };\n}\n\n/**\n *  Decrypts a message\n *\n *  @param      {Object} encrypted                   The encrypted message object\n *  @param      {String} encrypted.version           The string `x25519-xsalsa20-poly1305`\n *  @param      {String} encrypted.nonce             Base64 encoded nonce\n *  @param      {String} encrypted.ephemPublicKey    Base64 encoded ephemeral public key\n *  @param      {String} encrypted.ciphertext        Base64 encoded ciphertext\n *  @param      {String} secretKey                   The secret key as a Uint8Array\n *  @return     {String}                             The decrypted message\n *  @private\n */\n\nfunction decryptMessage(_ref, secretKey) {\n  var version = _ref.version,\n      ciphertext = _ref.ciphertext,\n      nonce = _ref.nonce,\n      ephemPublicKey = _ref.ephemPublicKey;\n\n  if (!secretKey) throw new Error('Encryption secret key has not been configured');\n  if (version !== ASYNC_ENC_ALGORITHM) throw new Error('Unsupported encryption algorithm: ' + version);\n  if (!(ciphertext && nonce && ephemPublicKey)) throw new Error('Invalid encrypted message');\n  var decrypted = _tweetnacl2.default.box.open(_tweetnaclUtil2.default.decodeBase64(ciphertext), _tweetnaclUtil2.default.decodeBase64(nonce), _tweetnaclUtil2.default.decodeBase64(ephemPublicKey), secretKey);\n  if (!decrypted) throw new Error('Could not decrypt message');\n  return unpad(_tweetnaclUtil2.default.encodeUTF8(decrypted));\n}\n\n/**\n *  Decrypts a response from a promise. This is intended to be used to wrap the response from Chasqui or other transport\n *\n *  @param      {Object} encrypted                 The encrypted message object\n *  @param      {String} encrypted.version         The string `x25519-xsalsa20-poly1305`\n *  @param      {String} encrypted.nonce           Base64 encoded nonce\n *  @param      {String} encrypted.ephemPublicKey  Base64 encoded ephemeral public key\n *  @param      {String} encrypted.ciphertext      Base64 encoded ciphertext\n *  @param      {String} secretKey                 The secret key as a Uint8Array\n *  @return   {Promise<Object, Error>}             a promise which resolves with the decrypted message or rejects with an error\n */\nfunction decryptResponse(response, secretKey) {\n  return new Promise(function (resolve, reject) {\n    if ((typeof response === 'undefined' ? 'undefined' : _typeof(response)) === 'object') {\n      resolve(decryptMessage(response, secretKey));\n    }\n    resolve(response);\n  });\n}\n\nexports.randomString = randomString;\nexports.encryptMessage = encryptMessage;\nexports.decryptMessage = decryptMessage;\nexports.decryptResponse = decryptResponse;\nexports.pad = pad;\nexports.unpad = unpad;"},"lineCount":128}},"hash":"f15019effa3ec2e54f5819cf813c863a","cacheData":{"env":{}}}